{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"This is the slot component header 1\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \"This is a paragraph tag\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Welcome...\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", null, \"'p' tag to separate button with input tag\", -1 /* HOISTED */);\nconst _hoisted_6 = {\n  type: \"text\",\n  ref: \"name\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Modal = _resolveComponent(\"Modal\");\n  const _component_Slots = _resolveComponent(\"Slots\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"Adding elements to the html page\"), _createElementVNode(\"h1\", null, _toDisplayString($data.title), 1 /* TEXT */), _createCommentVNode(\"Adding conditional div tag to toggle component display\"), $data.showModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\"Adding the Vue component imported\"), _createCommentVNode(\"Passing dynamic values to components using 'props'\"), _createCommentVNode(\"A better way is to bind the 'props' with the 'data()'\"), _createCommentVNode(\"Ensure to put a space before '/>' at the end\"), _createCommentVNode(\"Listening to emitted events using '@some_event_name' from the parent\"), _createVNode(_component_Modal, {\n    header: \"Sign up for Giveaway!\",\n    text: \"Grab your swag at half the price\",\n    data1: $data.data1,\n    data2: $data.data2,\n    theme: \"sale\",\n    onSome_closing_event: $options.toggleModal\n  }, null, 8 /* PROPS */, [\"data1\", \"data2\", \"onSome_closing_event\"]), _createCommentVNode(\"Passing slots to components\"), _createVNode(_component_Slots, {\n    theme: \"sale\",\n    onSlot_component_close: $options.toggleModal\n  }, {\n    default: _withCtx(() => [_hoisted_2, _hoisted_3]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onSlot_component_close\"])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\"Adding a div tag to put the button in the next line\"), _hoisted_4, _createCommentVNode(\"Adding a component toggle button\"), _createCommentVNode(\"Adding special click to respond when 'alt' is also pressed\"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = _withModifiers((...args) => $options.toggleModal && $options.toggleModal(...args), [\"alt\"]))\n  }, \"Show Modal (alt)\"), _createCommentVNode(\"Adding another 'p' tag to separate button and input field\"), _hoisted_5, _createCommentVNode(\"Creating a reference to the input tag\"), _createCommentVNode(\"Linking a button a function 'handleClick'\"), _createElementVNode(\"input\", _hoisted_6, null, 512 /* NEED_PATCH */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.handleClick && $options.handleClick(...args))\n  }, \"Click Me\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;gCAqBMA,oBAA4C,YAAxC,qCAAmC;gCACvCA,oBAA8B,WAA3B,yBAAuB;gCAK9BA,oBAAiB,WAAd,YAAU;gCAObA,oBAAgD,WAA7C,2CAAyC;;EAIrCC,IAAI,EAAC,MAAM;EAACC,GAAG,EAAC;;;;;6DArCvBC,uDAAuC,EACvCH,oBAAoB,6BAAbI,WAAK,kBAEZD,6EAA6D,EAClDC,eAAS,kBAApBC,oBAmBM,oBAlBJF,wDAAwC,EACxCA,yEAAyD,EACzDA,4EAA4D,EAC5DA,mEAAmD,EACnDA,2FAA2E,EAC3EG,aAK0CC;IALnCC,MAAM,EAAC,uBAAuB;IAC/BC,IAAI,EAAC,kCAAkC;IACtCC,KAAK,EAAEN,WAAK;IACZO,KAAK,EAAEP,WAAK;IACbQ,KAAK,EAAC,MAAM;IACXC,oBAAkB,EAAEC;uEAE3BX,kDAAkC,EAClCG,aAIQS;IAJDH,KAAK,EAAC,MAAM;IACXI,sBAAoB,EAAEF;;sBAC5B,MAA4C,CAA5CG,UAA4C,EAC5CC,UAA8B;;wFAIlCf,0EAA0D,EAC1DgB,UAAiB,EAEjBhB,uDAAuC,EACvCA,iFAAiE,EACjEH,oBAA0D;IAAjDoB,OAAK,wDAAMN,qDAAW;KAAE,kBAAgB,GAEjDX,gFAAgE,EAChEkB,UAAgD,EAEhDlB,4DAA4C,EAC5CA,gEAAgD,EAChDH,oBAA8B,SAA9BsB,UAA8B,+BAC9BtB,oBAA8C;IAArCoB,OAAK,yCAAEN,qDAAW;KAAE,UAAQ","names":["_createElementVNode","type","ref","_createCommentVNode","$data","_createElementBlock","_createVNode","_component_Modal","header","text","data1","data2","theme","onSome_closing_event","$options","_component_Slots","onSlot_component_close","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_hoisted_5","_hoisted_6"],"sourceRoot":"","sources":["C:\\Academics\\Enterprise Application Development\\Vue JavaScript\\Tutorials\\model-project\\src\\App.vue"],"sourcesContent":["<template>\n  <!--Adding elements to the html page-->\n  <h1>{{ title }}</h1>\n\n  <!--Adding conditional div tag to toggle component display-->\n  <div v-if=\"showModal\">\n    <!--Adding the Vue component imported-->\n    <!--Passing dynamic values to components using 'props'-->\n    <!--A better way is to bind the 'props' with the 'data()'-->\n    <!--Ensure to put a space before '/>' at the end-->\n    <!--Listening to emitted events using '@some_event_name' from the parent-->\n    <Modal header=\"Sign up for Giveaway!\" \n          text=\"Grab your swag at half the price\" \n          :data1=\"data1\" \n          :data2=\"data2\"\n          theme=\"sale\"\n          @some_closing_event=\"toggleModal\" />\n\n    <!--Passing slots to components-->\n    <Slots theme=\"sale\"\n           @slot_component_close=\"toggleModal\" >\n      <h1>This is the slot component header 1</h1>\n      <p>This is a paragraph tag</p>\n    </Slots>\n  </div>\n\n  <!--Adding a div tag to put the button in the next line-->\n  <p>Welcome...</p>\n\n  <!--Adding a component toggle button-->\n  <!--Adding special click to respond when 'alt' is also pressed-->\n  <button @click.alt=\"toggleModal\">Show Modal (alt)</button>\n\n  <!--Adding another 'p' tag to separate button and input field-->\n  <p>'p' tag to separate button with input tag</p>\n\n  <!--Creating a reference to the input tag-->\n  <!--Linking a button a function 'handleClick'-->\n  <input type=\"text\" ref=\"name\">\n  <button @click=\"handleClick\">Click Me</button>\n</template>\n\n<script>\n// Import 'Modal' Vue component\nimport Modal from './components/Modal.vue'\nimport Slots from './components/Slots.vue'\n\nexport default {\n  name: 'App',\n  // Adding Vue components\n  components: {\n    Modal\n  },\n  // Adding data to be referenced in the file\n  data(){\n    // Add data to be referenced is returned in the title\n    return {\n      title: 'My First Vue App',\n      data1: 'Some data 1',\n      data2: 'Some data 2',\n      showModal: false\n    }\n  },\n  // Adding methods to the file\n  methods: {\n    // Defining a method linked to the 'Click Me' button\n    handleClick(){\n      /*Define a method to get referenced element from html page*/\n\n      // Print the tag which has been referenced\n      console.log(this.$refs.name);\n      \n      // Add class name to 'input' tag on button click\n      this.$refs.name.classList.add('active');\n\n      // Add focus to the 'input' tag on button click\n      // Places the cursor in the input tag\n      this.$refs.name.focus();\n    },\n\n    // Defining method to toggle modal\n    toggleModal(){\n      this.showModal = !this.showModal\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\nh1{\n  border-bottom: 1px solid #ddd;\n  display: inline-block;\n  padding-bottom: 10px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}