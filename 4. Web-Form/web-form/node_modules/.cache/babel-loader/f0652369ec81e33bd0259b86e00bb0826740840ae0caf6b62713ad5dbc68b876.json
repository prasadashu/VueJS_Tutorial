{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      // The 'email' variable is updated when value is typed in form\n      email: '',\n      // The 'password' variable is updated when value is typed in form\n      password: '',\n      // The 'role' variable is updated when value is typed in form\n      role: '',\n      // The 'terms' variable is updated when value is typed in form\n      terms: false,\n      // The 'names' list is updated when value is typed in form\n      names: [],\n      // The 'tempSkill' variable is updated when value is typed in form\n      tempSkill: '',\n      // The 'skills' list is updated when value is pushed into it\n      skills: []\n    };\n  },\n  methods: {\n    addSkill(event) {\n      // Check if the key lifted is ',' and if there is a string in 'tempSkill' variable\n      if (event.key == ',' && this.tempSkill) {\n        // Push the skill to skills list\n        this.skills.push(this.tempSkill);\n        // Empty the 'tempSkill' variable\n        this.tempSkill = '';\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAkEA,eAAc;EACVA,IAAI,GAAE;IACF,OAAM;MACF;MACAC,KAAK,EAAE,EAAE;MAET;MACAC,QAAQ,EAAE,EAAE;MAEZ;MACAC,IAAI,EAAE,EAAE;MAER;MACAC,KAAK,EAAE,KAAK;MAEZ;MACAC,KAAK,EAAE,EAAE;MAET;MACAC,SAAS,EAAE,EAAE;MACb;MACAC,MAAM,EAAE;IACZ;EACJ,CAAC;EAEDC,OAAO,EAAC;IACJC,QAAQ,CAACC,KAAK,EAAC;MACX;MACA,IAAIA,KAAK,CAACC,GAAE,IAAK,GAAE,IAAK,IAAI,CAACL,SAAS,EAAC;QACnC;QACA,IAAI,CAACC,MAAM,CAACK,IAAI,CAAC,IAAI,CAACN,SAAS,CAAC;QAChC;QACA,IAAI,CAACA,SAAQ,GAAI,EAAE;MACvB;IACJ;EACJ;AACJ","names":["data","email","password","role","terms","names","tempSkill","skills","methods","addSkill","event","key","push"],"sourceRoot":"","sources":["C:\\Academics\\Enterprise Application Development\\Vue JavaScript\\Web-Form\\web-form\\src\\components\\SingupForm.vue"],"sourcesContent":["<template>\r\n    <!--Create a form-->\r\n    <!--We will skip the 'actions' as it will be taken care by Vue-->\r\n    <form>\r\n        <label>Email:</label>\r\n        <!--Using the 'v-model' directive to capture the value in 'email' variable-->\r\n        <input type=\"email\" required v-model=\"email\">\r\n\r\n        <label>Password:</label>\r\n        <!--Using the 'v-model' directive to capture the value in 'password' variable-->\r\n        <input type=\"password\" required v-model=\"password\">\r\n\r\n        <label>Role:</label>\r\n        <!--Using the 'v-model' directive to capture the value in 'role' variable-->\r\n        <select v-model=\"role\">\r\n            <option value=\"developer\">Web Developer</option>\r\n            <option value=\"designer\">Web Designer</option>\r\n        </select>\r\n\r\n        <div class=\"terms\">\r\n            <!--Using the 'v-model' directive to capture the value in 'terms' variable-->\r\n            <!--Checkboxes are inherently having a boolean functionality-->\r\n            <input type=\"checkbox\" v-model=\"terms\" required>\r\n            <label>Accept terms and conditions</label>\r\n        </div>\r\n\r\n        <!--Using the 'v-model' directive to capture the value in 'names' list-->\r\n        <!--Checkboxes with the same 'v-model' data property is used as a list-->\r\n        <div>\r\n            <input type=\"checkbox\" value=\"shaun\" v-model=\"names\">\r\n            <label>Shaun</label>\r\n        </div>\r\n        <div>\r\n            <input type=\"checkbox\" value=\"yori\" v-model=\"names\">\r\n            <label>Yori</label>\r\n        </div>\r\n        <div>\r\n            <input type=\"checkbox\" value=\"ashu\" v-model=\"names\">\r\n            <label>Ashu</label>\r\n        </div>\r\n\r\n        <label>Skills:</label>\r\n        <!--Using the 'v-model' directive to capture the value in 'tempSkill' variable-->\r\n        <!--Adding 'keyup' directive to activate when a key is lifted after being pressed-->\r\n        <!--Linking the directive to the 'addSkill' method-->\r\n        <input type=\"text\" v-model=\"tempSkill\" @keyup=\"addSkill\">\r\n        <!--Loop through skills-->\r\n        <!--Assign unique 'key' for each element-->\r\n        <div v-for=\"skill in skills\" v-bind:key=\"skill\" class=\"pill\">\r\n            {{ skill }}\r\n        </div>\r\n    </form>\r\n\r\n    <!--Output the values entered in the form-->\r\n    <p>Email: {{ email }}</p>\r\n    <p>Password: {{ password }}</p>\r\n    <p>Role: {{ role }}</p>\r\n    <p>Terms: {{ terms }}</p>\r\n    <p>Names: {{ names }}</p>\r\n</template>\r\n\r\n<!--Two-Way data binding running-->\r\n<!--Form input element data bound to data-->\r\n<!--Data bound to Form input element-->\r\n\r\n<script>\r\nexport default{\r\n    data(){\r\n        return{\r\n            // The 'email' variable is updated when value is typed in form\r\n            email: '',\r\n\r\n            // The 'password' variable is updated when value is typed in form\r\n            password: '',\r\n\r\n            // The 'role' variable is updated when value is typed in form\r\n            role: '',\r\n\r\n            // The 'terms' variable is updated when value is typed in form\r\n            terms: false,\r\n\r\n            // The 'names' list is updated when value is typed in form\r\n            names: [],\r\n\r\n            // The 'tempSkill' variable is updated when value is typed in form\r\n            tempSkill: '',\r\n            // The 'skills' list is updated when value is pushed into it\r\n            skills: []\r\n        }\r\n    },\r\n\r\n    methods:{\r\n        addSkill(event){\r\n            // Check if the key lifted is ',' and if there is a string in 'tempSkill' variable\r\n            if (event.key == ',' && this.tempSkill){\r\n                // Push the skill to skills list\r\n                this.skills.push(this.tempSkill);\r\n                // Empty the 'tempSkill' variable\r\n                this.tempSkill = '';\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n    form{\r\n        max-width: 420px;\r\n        margin: 30px auto;\r\n        background: white;\r\n        text-align: left;\r\n        padding: 40px;\r\n        border-radius: 10px;\r\n    }\r\n\r\n    label{\r\n        color: #aaa;\r\n        display: inline-block;\r\n        margin: 25px 0 15px;\r\n        font-size: 0.6em;\r\n        text-transform: uppercase;\r\n        letter-spacing: 1px;\r\n        font-weight: bold;\r\n    }\r\n\r\n    input, select{\r\n        display: block;\r\n        padding: 10px 6px;\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n        border: none;\r\n        border-bottom: 1px solid #ddd;\r\n        color: #555;\r\n    }\r\n\r\n    input[type=\"checkbox\"]{\r\n        display: inline-block;\r\n        width: 16px;\r\n        margin: 0 10px 0 0;\r\n        position: realtive;\r\n        top: 2px;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}