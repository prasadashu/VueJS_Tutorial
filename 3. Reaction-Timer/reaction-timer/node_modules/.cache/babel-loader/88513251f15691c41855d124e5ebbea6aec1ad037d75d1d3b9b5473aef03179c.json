{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Ninja Reaction Timer\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Block = _resolveComponent(\"Block\");\n  const _component_Results = _resolveComponent(\"Results\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.start && $options.start(...args)),\n    disabled: $data.isPlaying\n  }, \"Play\", 8 /* PROPS */, _hoisted_2), _createCommentVNode(\"Data received from 'Block' Component\"), _createCommentVNode(\"The data is identified using 'end' and contains the value of 'reactionTime'\"), _createCommentVNode(\"The 'end' is mapped to 'endGame' method which takes 'reactionTime' as an argument\"), $data.isPlaying ? (_openBlock(), _createBlock(_component_Block, {\n    key: 0,\n    delay: $data.delay,\n    onEnd: $options.endGame\n  }, null, 8 /* PROPS */, [\"delay\", \"onEnd\"])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\"The 'score' variable is sent to Results component using 'bind'\"), $data.showResults ? (_openBlock(), _createBlock(_component_Results, {\n    key: 1,\n    score: $data.score\n  }, null, 8 /* PROPS */, [\"score\"])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCACEA,oBAA6B,YAAzB,sBAAoB;;;;;6DAAxBC,UAA6B,EAC7BD,oBAAgE;IAAvDE,OAAK,yCAAEC,yCAAK;IAASC,QAAQ,EAAEC;KAAW,MAAI,8BAEvDC,2DAA2C,EAC3CA,kGAAkF,EAClFA,wGAAwF,EAC3ED,eAAS,kBAAtBE,aAA8DC;;IAA/BC,KAAK,EAAEJ,WAAK;IAAGK,KAAG,EAAEP;oFAEnDG,qFAAqE,EACtDD,iBAAW,kBAA1BE,aAAmDI;;IAAhBC,KAAK,EAAEP","names":["_createElementVNode","_hoisted_1","onClick","$options","disabled","$data","_createCommentVNode","_createBlock","_component_Block","delay","onEnd","_component_Results","score"],"sourceRoot":"","sources":["C:\\Academics\\Enterprise Application Development\\Vue JavaScript\\Reaction-Timer\\reaction-timer\\src\\App.vue"],"sourcesContent":["<template>\n  <h1>Ninja Reaction Timer</h1>\n  <button @click=\"start\" v-bind:disabled=\"isPlaying\">Play</button>\n  \n  <!--Data received from 'Block' Component-->\n  <!--The data is identified using 'end' and contains the value of 'reactionTime'-->\n  <!--The 'end' is mapped to 'endGame' method which takes 'reactionTime' as an argument-->\n  <Block v-if=\"isPlaying\" v-bind:delay=\"delay\" @end=\"endGame\" />\n\n  <!--The 'score' variable is sent to Results component using 'bind'-->\n  <Results v-if=\"showResults\" v-bind:score=\"score\" />\n</template>\n\n<script>\nimport Block from './components/Block.vue'\nimport Results from './components/Results.vue'\n\nexport default {\n  name: 'App',\n  data(){\n    return {\n      isPlaying: false,\n      delay: null,\n      score: null,\n      showResults: false\n    }\n  },\n  components: {\n    Block,\n    Results\n  },\n  methods:{\n    start(){\n      this.delay = 2000 + Math.random() * 5000;\n      this.isPlaying = true;\n      this.showResults = false;\n    },\n    endGame(reactionTime){\n      this.score = reactionTime;\n      this.isPlaying = false;\n      this.showResults = true;\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #444;\n  margin-top: 60px;\n}\n\nbutton{\n  background: #0faf87;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 16px;\n  letter-spacing: 10px;\n  cursor: pointer;\n  margin: 10px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}