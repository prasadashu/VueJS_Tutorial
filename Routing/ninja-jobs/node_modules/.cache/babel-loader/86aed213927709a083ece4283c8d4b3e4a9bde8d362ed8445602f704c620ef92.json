{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Job Details Page\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Loading Job Details\", -1 /* HOISTED */);\nconst _hoisted_5 = [_hoisted_4];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createCommentVNode(\"Here we use 'id' because we have this \\\"path: '/jobs/:id'\\\" in index.js\"), _createElementVNode(\"p\", null, \"The Job ID is \" + _toDisplayString($data.id), 1 /* TEXT */), _createCommentVNode(\"Accessing 'job.title' when the 'job' variable is set to null will throw an error\"), _createCommentVNode(\"We will enclose the job details in a div\"), _createCommentVNode(\"A condition will be applied to div to only display if the condition is met\"), $data.job ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"h2\", null, _toDisplayString($data.job.title), 1 /* TEXT */), _createElementVNode(\"p\", null, \"This job is of \" + _toDisplayString($data.id), 1 /* TEXT */), _createElementVNode(\"p\", null, \"The job is \" + _toDisplayString($data.job.details), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _hoisted_5))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCACIA,oBAAyB,YAArB,kBAAgB;;;;;;;gCAahBA,oBAA0B,WAAvB,qBAAmB;oBAAtBC,UAA0B;;6DAb9BC,UAAyB,EACzBC,8FAA4E,EAC5EH,oBAA6B,WAA1B,gBAAc,oBAAGI,QAAE,kBAEtBD,uGAAuF,EACvFA,+DAA+C,EAC/CA,iGAAiF,EACtEC,SAAG,kBAAdC,oBAIM,oBAHFL,oBAAwB,6BAAjBI,SAAG,CAACE,KAAK,kBAChBN,oBAA8B,WAA3B,iBAAe,oBAAGI,QAAE,kBACvBJ,oBAAmC,WAAhC,aAAW,oBAAGI,SAAG,CAACG,OAAO,qCAEhCF,oBAEM","names":["_createElementVNode","_hoisted_4","_hoisted_1","_createCommentVNode","$data","_createElementBlock","title","details"],"sourceRoot":"","sources":["C:\\Academics\\Enterprise Application Development\\Vue JavaScript\\Routing\\ninja-jobs\\src\\views\\jobs\\JobDetailsView.vue"],"sourcesContent":["<template>\r\n    <h1>Job Details Page</h1>\r\n    <!--Here we use 'id' because we have this \"path: '/jobs/:id'\" in index.js-->\r\n    <p>The Job ID is {{ id }}</p>\r\n\r\n    <!--Accessing 'job.title' when the 'job' variable is set to null will throw an error-->\r\n    <!--We will enclose the job details in a div-->\r\n    <!--A condition will be applied to div to only display if the condition is met-->\r\n    <div v-if=\"job\">\r\n        <h2>{{ job.title }}</h2>\r\n        <p>This job is of {{ id }}</p>\r\n        <p>The job is {{ job.details }}</p>\r\n    </div>\r\n    <div v-else>\r\n        <p>Loading Job Details</p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default{\r\n    // We can use either the 'props' or the 'id' in 'data' for routing\r\n    // Having both will throw a warning\r\n    // Both have been kept for the purpose of demonstration\r\n    props: ['id'],\r\n    data(){\r\n        return{\r\n            id: this.$route.params.id,\r\n            job: null\r\n        }\r\n    },\r\n    \r\n    // Declaring the 'mounted' hook to fetch data\r\n    mounted(){\r\n        fetch('http://localhost:3000/jobs/' + this.id)\r\n          .then(res => res.json())\r\n          .then(data => this.job = data)\r\n          .catch(err => console.log(err.message))\r\n    }\r\n}\r\n</script>\r\n\r\n<style></style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}