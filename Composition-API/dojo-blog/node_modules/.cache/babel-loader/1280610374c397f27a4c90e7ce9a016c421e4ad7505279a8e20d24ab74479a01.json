{"ast":null,"code":"import { ref, reactive } from 'vue';\nexport default {\n  name: 'HomeView',\n  // Composition API\n  // The 'setup' function will run before any other hook\n  setup() {\n    console.log('Setup');\n\n    // Create a reference to a paragraph tag\n    // The value of reference will be null as the reference hasn't been returned yet\n    // Therefore, there is no association of the 'p' tag with the reference variable\n    const p_reference = ref(null);\n    console.log(p_reference);\n    console.log(p_reference.value);\n\n    // Declaring Reactive Variables\n    // Using 'ref' to declare reference variables\n    const some_name_reactive = ref(\"Arnab\");\n    const some_profession_reactive = ref(\"Blockchain Engineer\");\n    const some_age_reactive = ref(20);\n\n    // Declaring variables in the 'setup' function\n    let first_name = \"Ashu\";\n    let last_name = \"Prasad\";\n\n    // Using Reactive instead of React\n    // Reactive requires objects in key-value pairs to be passed\n    const some_name_using_reactive = reactive({\n      name: \"Ashu_Reactive\"\n    });\n    const some_age_using_reactive = reactive({\n      age: 20\n    });\n\n    // Creating a Reference List\n    const names = ref(['mario', 'luigi', 'yori', 'mashu']);\n\n    // Defining functions\n    const handleClick = () => {\n      console.log(\"You clicked me!\");\n\n      // This will print the 'p' tag\n      console.log(p_reference.value);\n\n      // Adding class to existing 'p' tag\n      p_reference.value.classList.add('Test');\n\n      // Modifying the content of the 'p' tag\n      p_reference.value.textContent = \"This is the modified text\";\n\n      // Attempt to modify the name variables\n      first_name = \"Ashu_1\";\n      some_name_reactive.value = \"Arnab_1\";\n\n      // Updating 'Reactive' elements\n      // The '.value' clause is not required\n      some_name_using_reactive.name = \"Ashu_Reactive_Modified\";\n      some_age_using_reactive.age++;\n    };\n\n    // Return the variables from the 'setup' function\n    // Return the reference variable\n    // Return reactive variables\n    return {\n      first_name,\n      last_name,\n      handleClick,\n      p_reference,\n      some_name_reactive,\n      some_profession_reactive,\n      some_age_reactive,\n      some_name_using_reactive,\n      some_age_using_reactive\n    };\n  },\n  // Creating a 'created' hook\n  created() {\n    console.log('Created');\n  },\n  // Creating a 'mounted' hook\n  mounted() {\n    console.log('Mounted');\n  }\n};","map":{"version":3,"mappings":"AA8BA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAK;AAEnC,eAAe;EACbC,IAAI,EAAE,UAAU;EAEhB;EACA;EACAC,KAAK,GAAE;IACLC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;;IAEpB;IACA;IACA;IACA,MAAMC,WAAU,GAAIN,GAAG,CAAC,IAAI,CAAC;IAC7BI,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;IACxBF,OAAO,CAACC,GAAG,CAACC,WAAW,CAACC,KAAK,CAAC;;IAE9B;IACA;IACA,MAAMC,kBAAiB,GAAIR,GAAG,CAAC,OAAO,CAAC;IACvC,MAAMS,wBAAuB,GAAIT,GAAG,CAAC,qBAAqB,CAAC;IAC3D,MAAMU,iBAAgB,GAAIV,GAAG,CAAC,EAAE,CAAC;;IAEjC;IACA,IAAIW,UAAS,GAAI,MAAM;IACvB,IAAIC,SAAQ,GAAI,QAAQ;;IAExB;IACA;IACA,MAAMC,wBAAuB,GAAIZ,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAgB,CAAC,CAAC;IACpE,MAAMY,uBAAsB,GAAIb,QAAQ,CAAC;MAAEc,GAAG,EAAE;IAAG,CAAC,CAAC;;IAErD;IACA,MAAMC,KAAI,GAAIhB,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;;IAErD;IACA,MAAMiB,WAAU,GAAI,MAAM;MACxBb,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;MAE9B;MACAD,OAAO,CAACC,GAAG,CAACC,WAAW,CAACC,KAAK,CAAC;;MAE9B;MACAD,WAAW,CAACC,KAAK,CAACW,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;;MAEvC;MACAb,WAAW,CAACC,KAAK,CAACa,WAAU,GAAI,2BAA2B;;MAE3D;MACAT,UAAS,GAAI,QAAQ;MACrBH,kBAAkB,CAACD,KAAI,GAAI,SAAS;;MAEpC;MACA;MACAM,wBAAwB,CAACX,IAAG,GAAI,wBAAwB;MACxDY,uBAAuB,CAACC,GAAG,EAAE;IAC/B;;IAEA;IACA;IACA;IACA,OAAM;MACJJ,UAAU;MACVC,SAAS;MACTK,WAAW;MACXX,WAAW;MACXE,kBAAkB;MAClBC,wBAAwB;MACxBC,iBAAiB;MACjBG,wBAAwB;MACxBC;IACF;EACF,CAAC;EAED;EACAO,OAAO,GAAE;IACPjB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACxB,CAAC;EAED;EACAiB,OAAO,GAAE;IACPlB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACxB;AACF","names":["ref","reactive","name","setup","console","log","p_reference","value","some_name_reactive","some_profession_reactive","some_age_reactive","first_name","last_name","some_name_using_reactive","some_age_using_reactive","age","names","handleClick","classList","add","textContent","created","mounted"],"sourceRoot":"","sources":["C:\\Academics\\Enterprise Application Development\\Vue JavaScript\\Composition-API\\dojo-blog\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n    <!--Calling variables returned from 'setup' function-->\n    <h2>The first name is {{ first_name }} and last name is {{ last_name }}</h2>\n\n    <!--Binding button with 'click'-->\n    <button @click=\"handleClick\">Click Me</button>\n\n    <!--Paragraph tag being referenced from the 'setup' function-->\n    <p ref=\"p_reference\">This is a reference paragraph</p>\n\n    <!--Calling the Reactive Variables-->\n    <p>Reactive variable name is {{ some_name_reactive }} and Reactive variable profession is {{ some_profession_reactive }}</p>\n    <p>Age is {{ some_age_reactive }}</p>\n\n    <!--Creating an input tag and binding it with the Reference Variable-->\n    <input type=\"text\" v-model=\"some_name_reactive\">\n\n    <!--Creating a button to modify 'some_age_reactive' Reference Variable-->\n    <button @click=\"some_age_reactive++\">Increment Age</button>\n\n    <!--Testing reactive-->\n    <p>Reactive variable name is {{ some_name_using_reactive.name }} and Reactive variable age is {{ some_age_using_reactive.age }}</p>\n\n    <!--Creating an input tag to be used as a filter-->\n    <input type=\"text\" v-model=\"search\">\n  </div>\n</template>\n\n<script>\nimport { ref, reactive } from 'vue';\n\nexport default {\n  name: 'HomeView',\n\n  // Composition API\n  // The 'setup' function will run before any other hook\n  setup(){\n    console.log('Setup');\n\n    // Create a reference to a paragraph tag\n    // The value of reference will be null as the reference hasn't been returned yet\n    // Therefore, there is no association of the 'p' tag with the reference variable\n    const p_reference = ref(null);\n    console.log(p_reference);\n    console.log(p_reference.value);\n\n    // Declaring Reactive Variables\n    // Using 'ref' to declare reference variables\n    const some_name_reactive = ref(\"Arnab\");\n    const some_profession_reactive = ref(\"Blockchain Engineer\");\n    const some_age_reactive = ref(20);\n\n    // Declaring variables in the 'setup' function\n    let first_name = \"Ashu\";\n    let last_name = \"Prasad\";\n\n    // Using Reactive instead of React\n    // Reactive requires objects in key-value pairs to be passed\n    const some_name_using_reactive = reactive({ name: \"Ashu_Reactive\" });\n    const some_age_using_reactive = reactive({ age: 20 });\n\n    // Creating a Reference List\n    const names = ref(['mario', 'luigi', 'yori', 'mashu'])\n\n    // Defining functions\n    const handleClick = () => {\n      console.log(\"You clicked me!\");\n      \n      // This will print the 'p' tag\n      console.log(p_reference.value);\n\n      // Adding class to existing 'p' tag\n      p_reference.value.classList.add('Test');\n\n      // Modifying the content of the 'p' tag\n      p_reference.value.textContent = \"This is the modified text\";\n\n      // Attempt to modify the name variables\n      first_name = \"Ashu_1\";\n      some_name_reactive.value = \"Arnab_1\";\n\n      // Updating 'Reactive' elements\n      // The '.value' clause is not required\n      some_name_using_reactive.name = \"Ashu_Reactive_Modified\";\n      some_age_using_reactive.age++;\n    }\n\n    // Return the variables from the 'setup' function\n    // Return the reference variable\n    // Return reactive variables\n    return{\n      first_name,\n      last_name,\n      handleClick,\n      p_reference,\n      some_name_reactive,\n      some_profession_reactive,\n      some_age_reactive,\n      some_name_using_reactive,\n      some_age_using_reactive\n    }\n  },\n\n  // Creating a 'created' hook\n  created(){\n    console.log('Created');\n  },\n\n  // Creating a 'mounted' hook\n  mounted(){\n    console.log('Mounted');\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}